{
  "Snippet: Test Codeunit": {
    "prefix": "ttestcodeunit (NAB)",
    "body": [
      "codeunit ${1:Id} ${2:MyTestCodeunit}",
      "{",
      "\tDescription = '${3:Description}';",
      "\tSubtype = Test;",
      "",
      "${0}",
      "",
      "\ttrigger OnRun();",
      "\tbegin",
      "\t\tIsInitialized := false;",
      "\tend;",
      "",
      "\tlocal procedure Initialize();",
      "\tbegin",
      "\t\tLibraryTestInitialize.OnTestInitialize(Codeunit::${2:MyTestCodeunit});",
      "\t\tClearLastError();",
      "\t\tLibraryVariableStorage.Clear();",
      "\t\tLibrarySetupStorage.Restore();",
      "\t\tif IsInitialized then",
      "\t\t\texit;",
      "",
      "\t\tLibraryTestInitialize.OnBeforeTestSuiteInitialize(Codeunit::${2:MyTestCodeunit});",
      "",
      "\t\tLibraryRandom.Init();",
      "",
      "\t\t// CUSTOMIZATION: Prepare setup tables etc. that are used for all test functions",
      "",
      "",
      "\t\tIsInitialized := true;",
      "\t\tCommit();",
      "",
      "\t\t// CUSTOMIZATION: Add all setup tables that are changed by tests to the SetupStorage, so they can be restored for each test function that calls Initialize.",
      "\t\t// This is done InMemory, so it could be run after the COMMIT above",
      "\t\t//   LibrarySetupStorage.Save(DATABASE::\"[SETUP TABLE ID]\");",
      "",
      "\t\tLibraryTestInitialize.OnAfterTestSuiteInitialize(Codeunit::${2:MyTestCodeunit});",
      "\tend;",
      "",
      "\tvar",
      "\t\tAssert: Codeunit \"Library Assert\";",
      "\t\tLibraryRandom: Codeunit \"Library - Random\";",
      "\t\tLibrarySetupStorage: Codeunit \"Library - Setup Storage\";",
      "\t\tLibraryTestInitialize: Codeunit \"Library - Test Initialize\";",
      "\t\tLibraryVariableStorage: Codeunit \"Library - Variable Storage\";",
      "\t\tIsInitialized: Boolean;",
      "}"
    ],
    "description": "Snippet: Test Codeunit"
  },
  "Snippet: Test Function": {
    "prefix": "ttestfunction (NAB)",
    "body": [
      "\t[Test]",
      "\tprocedure ${1:FunctionName}Test()",
      "\t// [FEATURE] ${2:Feature Id / Description}",
      "\t// [SCENARIO] ${3:Scenario Description}",
      "\tvar",
      "\t\t",
      "\tbegin",
      "\t\tInitialize();",
      "\t\t// [GIVEN] ${4:Given}",
      "\t\t// [WHEN] ${5:When}",
      "\t\t// [THEN] ${6:Then}",
      "\t\t${0}",
      "\tend;",
      ""
    ],
    "description": "Snippet: Test Function"
  },
  "Snippet: SendNotificationHandler": {
    "prefix": "ttestSendNotificationHandler (NAB)",
    "body": [
      "\t[SendNotificationHandler]",
      "\tprocedure SendNotificationHandler(var Notif: Notification): Boolean",
      "\t// Call the following in the Test function",
      "\t//   LibraryVariableStorage.Enqueue('ExpectedMessage');",
      "\tbegin",
      "\t\tAssert.ExpectedMessage(LibraryVariableStorage.DequeueText(), Notif.Message());",
      "\tend;"
    ],
    "description": "Snippet: Test SendNotificationHandler"
  },
  "Snippet: MessageHandler": {
    "prefix": "ttestMessageHandler (NAB)",
    "body": [
      "\t[MessageHandler]",
      "\tprocedure ExpectedMessageHandler(Msg: Text[1024])",
      "\t// Call the following in the Test function",
      "\t//   LibraryVariableStorage.Enqueue('ExpectedMessage');",
      "\tbegin",
      "\t\tAssert.ExpectedMessage(LibraryVariableStorage.DequeueText(), Msg);",
      "\tend;"
    ],
    "description": "Snippet: Test MessageHandler"
  },
  "Snippet: ConfirmHandler": {
    "prefix": "ttestConfirmHandler (NAB)",
    "body": [
      "\t[ConfirmHandler]",
      "\tprocedure ExpectedConfirmHandler(Question: Text[1024]; var Reply: Boolean)",
      "\t// Call the following in the Test function",
      "\t//   LibraryVariableStorage.Enqueue('ExpectedConfirmText');",
      "\t//   LibraryVariableStorage.Enqueue(true); // or false, depending of the reply you want if below question is asked. Any other question will throw an error",
      "\tbegin",
      "\t\tAssert.ExpectedMessage(LibraryVariableStorage.DequeueText(), Question);",
      "\t\tReply := LibraryVariableStorage.DequeueBoolean();",
      "\tend;"
    ],
    "description": "Snippet: Test ConfirmHandler"
  },
  "Snippet: GIVEN clause": {
    "prefix": "tGIVEN (NAB)",
    "body": [
      "// [GIVEN] ${1:Given}",
      "${0}"
    ],
    "description": "Snippet: GIVEN test clause"
  },
  "Snippet: WHEN clause": {
    "prefix": "tWHEN (NAB)",
    "body": [
      "// [WHEN] ${1:When}",
      "${0}"
    ],
    "description": "Snippet: WHEN test clause"
  },
  "Snippet: THEN clause": {
    "prefix": "tTHEN (NAB)",
    "body": [
      "// [THEN] ${1:Then}",
      "${0}"
    ],
    "description": "Snippet: THEN test clause"
  }
}
