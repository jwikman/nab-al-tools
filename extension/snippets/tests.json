{
  "Snippet: Test Codeunit": {
    "prefix": "ttestcodeunit (NAB)",
    "body": [
      "codeunit ${1:Id} ${2:MyTestCodeunit}",
      "{",
      "\tDescription = '${3:Description}';",
      "\tSubtype = Test;",
      "",
      "${0}",
      "",
      "\ttrigger OnRun();",
      "\tbegin",
      "\t\tgIsInitialized := false;",
      "\tend;",
      "",
      "\tlocal procedure Initialize();",
      "\tbegin",
      "\t\tgLibraryTestInitialize.OnTestInitialize(CODEUNIT::${2:MyTestCodeunit});",
      "\t\tClearLastError();",
      "\t\tgLibraryVariableStorage.Clear();",
      "\t\tgLibrarySetupStorage.Restore();",
      "\t\tif gIsInitialized then",
      "\t\t\texit;",
      "",
      "\t\tgLibraryTestInitialize.OnBeforeTestSuiteInitialize(CODEUNIT::${2:MyTestCodeunit});",
      "",
      "\t\tgLibraryRandom.Init();",
      "",
      "\t\t// CUSTOMIZATION: Prepare setup tables etc. that are used for all test functions",
      "",
      "",
      "\t\tgIsInitialized := true;",
      "\t\tCommit();",
      "",
      "\t\t// CUSTOMIZATION: Add all setup tables that are changed by tests to the SetupStorage, so they can be restored for each test function that calls Initialize.",
      "\t\t// This is done InMemory, so it could be run after the COMMIT above",
      "\t\t//gLibrarySetupStorage.Save(DATABASE::\"[SETUP TABLE ID]\");",
      "",
      "\t\tgLibraryTestInitialize.OnAfterTestSuiteInitialize(CODEUNIT::${2:MyTestCodeunit});",
      "\tend;",
      "",
      "\tvar",
      "\t\tgAssert: Codeunit Assert;",
      "\t\tgLibraryRandom: Codeunit \"Library - Random\";",
      "\t\tgLibrarySetupStorage: Codeunit \"Library - Setup Storage\";",
      "\t\tgLibraryTestInitialize: Codeunit \"Library - Test Initialize\";",
      "\t\tgLibraryVariableStorage: Codeunit \"Library - Variable Storage\";",
      "\t\tgIsInitialized: Boolean;",
      "}"
    ],
    "description": "Snippet: Test Codeunit"
  },
  "Snippet: Test Function": {
    "prefix": "ttestfunction (NAB)",
    "body": [
      "\t[Test]",
      "\tprocedure ${1:FunctionName}Test()",
      "\t// [FEATURE] ${2:Feature Id / Description}",
      "\t// [SCENARIO] ${3:Scenario Description}",
      "\t// [PREREQ] ${4:Prerequisites}",
      "\t// [COMMENT] ${5:Comment}",
      "\tvar",
      "\t\t",
      "\tbegin",
      "\t\tInitialize();",
      "\t\t// [GIVEN] ${6:Given}",
      "\t\t// [WHEN] ${7:When}",
      "\t\t// [THEN] ${8:Then}",
      "\t\t${0}",
      "\tend;",
      ""
    ],
    "description": "Snippet: Test Function"
  },
  "Snippet: SendNotificationHandler": {
    "prefix": "ttestSendNotificationHandler (NAB)",
    "body": [
      "\t[SendNotificationHandler]",
      "\tprocedure SendNotificationHandler(var Notif: Notification): Boolean",
      "\t// Call the following in the Test function",
      "\t// gLibraryVariableStorage.Enqueue('ExpectedMessage');",
      "\tbegin",
      "\t\tgAssert.ExpectedMessage(gLibraryVariableStorage.DequeueText(), Notif.Message());",
      "\tend;"
    ],
    "description": "Snippet: Test SendNotificationHandler"
  },
  "Snippet: MessageHandler": {
    "prefix": "ttestMessageHandler (NAB)",
    "body": [
      "\t[MessageHandler]",
      "\tprocedure ExpectedMessageHandler(Msg: Text[1024])",
      "\t// Call the following in the Test function",
      "\t// gLibraryVariableStorage.Enqueue('ExpectedMessage');",
      "\tbegin",
      "\t\tgAssert.ExpectedMessage(gLibraryVariableStorage.DequeueText(), Msg);",
      "\tend;"
    ],
    "description": "Snippet: Test MessageHandler"
  },
  "Snippet: ConfirmHandler": {
    "prefix": "ttestConfirmHandler (NAB)",
    "body": [
      "\t[ConfirmHandler]",
      "\tprocedure ExpectedConfirmHandler(pQuestion: Text[1024]; VAR pvReply: Boolean)",
      "\t// Call the following in the Test function",
      "\t//gLibraryVariableStorage.Enqueue('ExpectedConfirmText');",
      "\t//gLibraryVariableStorage.Enqueue(true); // or false, depending of the reply you want if below question is asked. Any other question will throw an error",
      "\tbegin",
      "\t\tgAssert.ExpectedMessage(gLibraryVariableStorage.DequeueText(), pQuestion);",
      "\t\tpvReply := gLibraryVariableStorage.DequeueBoolean();",
      "\tend;"
    ],
    "description": "Snippet: Test ConfirmHandler"
  }
}
